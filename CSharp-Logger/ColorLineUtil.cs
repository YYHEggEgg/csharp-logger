using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YYHEggEgg.Logger.Utils
{
    internal struct ColorLineResult
    {
        private List<(string text, ConsoleColor color)> _color_parts;
        public List<(string text, ConsoleColor color)> ColorParts
        {
            get => _color_parts;
            set
            {
                _color_parts = value;
                _text_nocolor = null;
            }
        }
        private string? _text_nocolor;
        public string TextWithoutColor
        {
            get
            {
                if (_text_nocolor != null) return _text_nocolor;
                StringBuilder sb = new();
                foreach (var strpart in _color_parts)
                {
                    sb.Append(strpart.text);
                }
                _text_nocolor = sb.ToString();
                return _text_nocolor;
            }
        }

        public ColorLineResult()
        {
            _color_parts = new();
            _text_nocolor = null;
        }

        /// <summary>
        /// 输出文字至控制台。支持使用颜色，在文本中加入xml标签即可：
        /// &lt;color=Red&gt;红色文字&lt;&#47;color&gt;。颜色代码必须为
        /// <see cref="ConsoleColor"/> 中的有效值，如"Red"、"Green"等。
        /// </summary>
        public void WriteToConsole()
        {
            foreach (var strpart in _color_parts)
            {
                Console.ForegroundColor = strpart.color;
                Console.Write(strpart.text);
            }
            Console.ForegroundColor = ColorLineUtil.DefaultColor;
            Console.WriteLine();
        }
    }

    internal static class ColorLineUtil
    {
        public static ConsoleColor DefaultColor = ConsoleColor.White;

        public static ColorLineResult AnalyzeColorText(string input)
        {
            List<(string text, ConsoleColor color)> res = new();
            try
            {
                // Generated by ChatGPT
                var cur_color = DefaultColor; //设置默认白色字体颜色
                int startIndex = 0;

                while (true)
                {
                    int colorStart = input.IndexOf("<color=", startIndex); //查找下一个彩色文字的起始位置
                    if (colorStart == -1) //若未找到，输出剩余部分并退出循环
                    {
                        res.Add((input.Substring(startIndex, input.Length - startIndex), cur_color));
                        break;
                    }

                    int colorEnd = input.IndexOf(">", colorStart); //查找彩色文字的结束位置
                    if (colorEnd == -1) //若未找到，输出剩余部分并退出循环
                    {
                        res.Add((input.Substring(startIndex, input.Length - startIndex), cur_color));
                        break;
                    }

                    string colorCode = input.Substring(colorStart + 7, colorEnd - colorStart - 7); //提取颜色代码

                    if (Enum.TryParse(colorCode, out ConsoleColor color)) //尝试将字符串颜色代码解析为ConsoleColor枚举类型
                    {
                        res.Add((input.Substring(startIndex, colorStart - startIndex), cur_color)); //输出彩色文字前的部分
                        cur_color = color; //设置字体颜色
                        int textStart = colorEnd + 1;
                        int textEnd = input.IndexOf("</color>", textStart); //查找彩色文字结束标记
                        if (textEnd == -1) //若未找到，输出剩余部分并退出循环
                        {
                            res.Add((input.Substring(textStart, input.Length - textStart), cur_color));
                            break;
                        }
                        res.Add((input.Substring(textStart, textEnd - textStart), cur_color)); //输出彩色文字
                        cur_color = ConsoleColor.White; //恢复默认字体颜色
                        startIndex = textEnd + 8; //继续查找下一个彩色文字的起始位置
                    }
                    else //解析失败，跳过此次查找
                    {
                        startIndex = colorEnd + 1;
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Erro($"Content has caused exception when resolving color: ex={ex}; content (base64)=" +
                    Convert.ToBase64String(Encoding.UTF8.GetBytes(input)), nameof(ColorLineUtil));
                return new()
                {

                };
            }
            return new()
            {
                ColorParts = res
            };
        }
    }
}
